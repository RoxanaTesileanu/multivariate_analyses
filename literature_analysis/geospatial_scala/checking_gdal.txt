Checking GDAL in Scala
Author: Roxana Tesileanu, INCDS, roxana.te@web.de

- I've placed the gdal-2.21.jar in the lib directory of the DeepLearning Scala project and hope to get the functionality of the GDAL, OGR and OSR libraries in Scala. 


- The main aim is to check if I can make the code from Chris Garrard (Geoprocessing with Python, 2015) work in Scala too.

_________________________________



scala> import org.gdal._
import org.gdal._

scala> org.gdal.
gdal   gdalconst   gnm   ogr   osr

scala> org.gdal.ogr.
DataSource    FieldDefn       ProgressCallback       ogrConstants   
Driver        GeomFieldDefn   StyleTable             ogrJNI         
Feature       Geometry        TermProgressCallback                  
FeatureDefn   Layer           ogr          

scala> org.gdal.gdal.
AsyncReader            GridOptions            Transformer              
Band                   InfoOptions            TranslateOptions         
BuildVRTOptions        MajorObject            VectorTranslateOptions   
ColorTable             NearblackOptions       WarpOptions              
DEMProcessingOptions   ProgressCallback       XMLNode                  
Dataset                RasterAttributeTable   XMLNodeType              
Driver                 RasterizeOptions       gdal                     
GCP                    TermProgressCallback   gdalJNI                  

cala> org.gdal.osr.
CoordinateTransformation   SpatialReference   osr   osrConstants   osrJNI


__________________________________________

A) Background on geoprocessing: Introduction (from C.Garrard, 2015)

1) Types of spatial data

- vector data 
- raster data

Vector data is made up of points, lines and polygons.
Raster data is a two- or three-dimensional array of data values.

The features on a map are items of interest like e.g. roads, country boundaries, weather stations, etc..  Features have attributes attached to them such as name and recorded variables. Using digital data, has the advantage of attaching multiple attribute values to each feature, whether you plan to display the information on a map or analyse the data.

Spatial overlay analyses are easy using vactor data.

Raster data is well suited to any continuous data (e.g. aerial photos, satellite imagery). A grid of values can capture local variation more easily (e.g. temperature, rainfall, elevation - in Digital Elevation Models DEMs, vegetation mapping). 
Blocks of adjacent pixels can be used to calculate useful information like the slope from DEMs, which can be further used to estimate the runoff. This type of information gaining is done using windows (sets of pixels, for which we find the variable we want for the central pixel). You move a window around a raster so each pixel is in the center of its own window. 

Vector and raster data can also be used together.  
   

GEOPROCESSING IS A GENERAL TERM FOR MANIPULATING SPATIAL DATA (WHETHER RASTER OR VECTOR DATA). 

Simple vector geoprocessing: overlay and proximity analyses.
Simple raster geoprocessing: resizing pixels, performing calculations based on multiple datasets, moving windows analyses.

Using a programming language allows you to customize your analysis instead of being limited to what the software user interface allows. Also, it allows you to process many datasets at once. 

Free and open source software is not only free with regard to price but allows for customization. You don't give up quality by using open source tools. In fact several of these packages are also used by proprietary software. 


B) Background on geoprocessing: Reading and writing vector data (from C.Garrard, 2015)

The types of data, where the features of interest are all distinct objects, are called vector datasets.
For manipulating vector datasets we will use the OGR library (to read, writem and edit these types for later use).

VECTOR DATA ARE DATA IN WHICH THE FEATURES OF INTEREST ARE REPRESENTED AS DISCRETE GEOMETRIES (POINTS, LINES, AND POLYGONS). Such features have distinct boundaries, but countinuous data such as elevetion don't. For example, polygons showing subalpine zones for a region would be a good proxy for an elevation range, but you lose much of the detailed elevation data within those polygons. Vector data candidates are for example roads, power lines, rivers, lakes, landownerships,counties and countries, cities, restaurants, mountain peaks, etc..

Vector data is more than geometries however. Each one of these features also has associated attributes. These attributes can be of various types. They can be numeric variables or categorical variables (strings). 

 VECTOR DATA ALWAYS LOOKS SMOOTH, NO MATTER THE SCALE (CONTRARY TO RASTER DATA). 
Only the type of geometry used to represent the features of interest may vary depending on scale (e.g. point for a city for low resolution, and polygon for high-resolution -> the higher the resolution the more detail can be shown). 

One common type of vector data analysis is to measure relationships between features, typically by overlapping them on one another to determine their spatial relationship. Another aspect of spatial relationships is the distance between two features. You can use GPS-collared wildlife and see the direction of travel, what travel distances they covered and how they interact with man-made features such as roads. Shapefiles are a popular format for sotring vector data. A shapefile isn't made of a single file however. This format requires a minimum of three binary files, each of which serves a different purpose:
- geometry information is stored in .shp and .shx files, and attribute values are stored in a .dbf file. You need to make sure that they are all kept in the same folder! 

Another widely used format, esp. for web-mapping applications is GeoJSON. These are plain text files that you can open up and look at in any text editor. Unlike a shapefile, a GeoJSON dataset consists of one file that stores all required information. 

Vector data sets can also be stored in relational databases. The two most popular spatial extensions for database systems are PostGIS (extension on top of PostgreSQL) and SpatialLite (works with SQLite databases). Another popular database format is the Esri file geodatabase. 

1) Introduction OGR

The OGR Simple Features Library is part of the Geospatial Data Abstraction Library (GDAL), an extremely popular open source library for reading and writing spatial data. The OGR part of GDAL is the one that provides the ability to read and write many different vector data formats. OGR also allows you to create and manipulate geometries; edit attribute values; filter vector data based on attribute values or spatial location; and it offers data analysis capabilities. 
The GDAL library was originally written in C and C++ and has bindings for several other languages. 

THE OGR CLASS STRUCTURE:

Spatial vector data is stored in a DATA SOURCE object (the shapefile, GeoJSON file, SpatiaLite, or PostGIS database, a.o.). This data source object can have one or more LAYERS, one for each dataset contained in the data source. Many vector formats, such as shapefiles can only contain one dataset, but others like SpatiLite can contain multiple datasets. ONE DATASET -> ONE LAYER. 

Each layer contains a collection of FEATURES, that holds the geometries and their attributes. ONE DATASET -> ONE LAYER -> GEOMETRIES AND ATTRIBUTES OF THE FEATURES. 	

The first step to accessing any vector data is to open the data source. For this you need to have an appropriate DRIVER that tells OGR how to work with your data format. EACH VECTOR FORMAT HAS ITS OWN DRIVER. YOU USE THAT DRIVER TO READ AND WRITE A PARTICULAR FORMAT. 

 
IMPLEMENTING the ogr.getDriverByName(string) function:

examples: 
ogr.getDriverByName("geojson")
org.getDriverByName("ESRI shapefile")


When implementing the Java method in Scala I get an exception:
scala>  val driver = org.gdal.ogr.ogrJNI.GetDriverByName("ESRI Shapefile")
java.lang.UnsatisfiedLinkError: org.gdal.ogr.ogrJNI.GetDriverByName(Ljava/lang/String;)J
  at org.gdal.ogr.ogrJNI.GetDriverByName(Native Method)
  ... 42 elided

I will get the code of Rob Emanuele (https://github.com/geotrellis/gdal-scala/blob/master/gdal/src/main/scala/org/gdal/scala/Gdal.scala) to get around that exception. 
I still have to use the function though. 
I will set the Java options for sbt.
One fact is certain, I have to install the Java bindings for GDAl, which is done with "$sudo apt-get install libgdal-java" (necessary packages: libproj-dev, gdal-bin, libgdal-dev, libgdal-doc) (see https://packages.ubuntu.com/source/trusty/gdal). 

AND THE RESULT OF ALL THIS IS: 

scala> org.gdal.ogr.ogrJNI.GetDriverByName("ESRI Shapefile")
res0: Long = 0

scala> org.gdal.ogr.ogrJNI.GetDriverByName("GeoJSON")
res1: Long = 0

scala> val ds = ogr.Open("sal_alk_eu27_laea1052.shp", 1)
ds: org.gdal.ogr.DataSource = null
________________________________________________


THE WORKING CODE FOR A NON-EMPTY DATASOURCE IS:

scala> org.gdal.ogr.ogr.RegisterAll()

scala> org.gdal.ogr.ogr.Open("example.shp")
res1: org.gdal.ogr.DataSource = org.gdal.ogr.DataSource@305c6b70

scala> res1.
CommitTransaction   GetLayerCount           SetDescription     
CopyLayer           GetMetadataDomainList   SetMetadata        
CreateLayer         GetMetadataItem         SetMetadataItem    
DeleteLayer         GetMetadata_Dict        SetStyleTable      
ExecuteSQL          GetMetadata_List        StartTransaction   
FlushCache          GetName                 SyncToDisk         
GetDescription      GetRefCount             TestCapability     
GetDriver           GetStyleTable           delete             
GetLayer            GetSummaryRefCount      equals             
GetLayerByIndex     ReleaseResultSet        getName            
GetLayerByName      RollbackTransaction     hashCode           

scala> res1.GetLayerCount
res2: Int = 1

scala> val lyr = res1.GetLayer(0)
lyr: org.gdal.ogr.Layer = org.gdal.ogr.Layer@305ca330

cala> lyr.
AlterFieldDefn      GetMetadataDomainList   SetIgnoredFields       
Clip                GetMetadataItem         SetMetadata            
CommitTransaction   GetMetadata_Dict        SetMetadataItem        
CreateFeature       GetMetadata_List        SetNextByIndex         
CreateField         GetName                 SetSpatialFilter       
CreateGeomField     GetNextFeature          SetSpatialFilterRect   
DeleteFeature       GetRefCount             SetStyleTable          
DeleteField         GetSpatialFilter        StartTransaction       
Erase               GetSpatialRef           SymDifference          
FindFieldIndex      GetStyleTable           SyncToDisk             
GetDescription      Identity                TestCapability         
GetExtent           Intersection            Union                  
GetFIDColumn        ReorderField            Update                 
GetFeature          ReorderFields           addReference           
GetFeatureCount     ResetReading            delete                 
GetFeaturesRead     RollbackTransaction     equals                 
GetGeomType         SetAttributeFilter      hashCode               
GetGeometryColumn   SetDescription                                 
GetLayerDefn        SetFeature                                     

scala> lyr.GetName
res3: String = example

cala> lyr.GetFeatureCount
res4: Long = 927

scala> lyr.GetSpatialRef
res5: org.gdal.osr.SpatialReference = null

cala> val feat0 = lyr.GetFeature(0)
feat0: org.gdal.ogr.Feature = org.gdal.ogr.Feature@3164b9a0

scala> feat0.
Clone                   GetFieldType                  SetFieldNull           
DumpReadable            GetGeomFieldCount             SetFieldStringList     
Equal                   GetGeomFieldDefnRef           SetFrom                
FillUnsetWithDefault    GetGeomFieldIndex             SetFromWithMap         
GetDefnRef              GetGeomFieldRef               SetGeomField           
GetFID                  GetGeometryRef                SetGeomFieldDirectly   
GetFieldAsBinary        GetNativeData                 SetGeometry            
GetFieldAsDateTime      GetNativeMediaType            SetGeometryDirectly    
GetFieldAsDouble        GetStyleString                SetNativeData          
GetFieldAsDoubleList    IsFieldNull                   SetNativeMediaType     
GetFieldAsInteger       IsFieldSet                    SetStyleString         
GetFieldAsInteger64     IsFieldSetAndNotNull          UnsetField             
GetFieldAsIntegerList   SetFID                        Validate               
GetFieldAsString        SetField                      clone                  
GetFieldAsStringList    SetFieldBinaryFromHexString   delete                 
GetFieldCount           SetFieldDoubleList            equals                 
GetFieldDefnRef         SetFieldInteger64             hashCode               
GetFieldIndex           SetFieldIntegerList                                  


cala> res1.delete()

DON'T FORGET TO CLOSE THE DATA SOURCE WITH ds.delete()!!!

___________________________________________

Checking OSR

scala> lyr.GetSpatialRef
res10: org.gdal.osr.SpatialReference =
GEOGCS["GCS_WGS_1984",
    DATUM["WGS_1984",
        SPHEROID["WGS_84",6378137,298.257223563]],
    PRIMEM["Greenwich",0],
    UNIT["Degree",0.017453292519943295],
    AUTHORITY["EPSG","4326"]]


__________________________________________

Creating SpatialReference objects: I will use the ETRS-LAEASRS as it is the single CRS for all Europe and is used for statistical mapping at all scales and other purposes where true area representation is required.

http://spatialreference.org/ref/epsg/3035/


scala> org.gdal.ogr.ogr.RegisterAll()

scala> val ds = org.gdal.ogr.ogr.Open("sal_alk_eu27_laea1052.shp")
ds: org.gdal.ogr.DataSource = org.gdal.ogr.DataSource@68b12470

scala> val lyr = ds.GetLayer(0)
lyr: org.gdal.ogr.Layer = org.gdal.ogr.Layer@68b12de0

scala> lyr.GetSpatialRef
res1: org.gdal.osr.SpatialReference =
PROJCS["ETRS_1989_LAEA",
    GEOGCS["GCS_ETRS_1989",
        DATUM["European_Terrestrial_Reference_System_1989",
            SPHEROID["GRS_1980",6378137.0,298.257222101]],
        PRIMEM["Greenwich",0.0],
        UNIT["Degree",0.0174532925199433]],
    PROJECTION["Lambert_Azimuthal_Equal_Area"],
    PARAMETER["False_Easting",4321000.0],
    PARAMETER["False_Northing",3210000.0],
    PARAMETER["longitude_of_center",10.0],
    PARAMETER["latitude_of_center",52.0],
    UNIT["Meter",1.0]]

scala> val newSR = org.gdal.osr.SpatialReference
<console>:11: error: object org.gdal.osr.SpatialReference is not a value
       val newSR = org.gdal.osr.SpatialReference
                                ^

scala> val newSR = org.gdal.osr.SpatialReference()
<console>:11: error: object org.gdal.osr.SpatialReference is not a value
       val newSR = org.gdal.osr.SpatialReference()
                                ^

scala> val newSR = org.gdal.osr.SpatialReference.getCPtr
   def getCPtr(x$1: org.gdal.osr.SpatialReference): Long

scala> val newSR = org.gdal.osr.
CoordinateTransformation   SpatialReference   osr   osrConstants   osrJNI

scala> val newSR = org.gdal.osr.SpatialReference
   object SpatialReference

scala> val newSR = org.gdal.osr.SpatialReference
<console>:11: error: object org.gdal.osr.SpatialReference is not a value
       val newSR = org.gdal.osr.SpatialReference
                                ^

scala> val newSR = org.gdal.osr.SpatialReference()
<console>:11: error: object org.gdal.osr.SpatialReference is not a value
       val newSR = org.gdal.osr.SpatialReference()
                                ^

scala> val newSR = new org.gdal.osr.SpatialReference()
newSR: org.gdal.osr.SpatialReference =

scala> newSR.
AutoIdentifyEPSG              SetCS                               
Clone                         SetCompoundCS                       
CloneGeogCS                   SetEC                               
CopyGeogCSFrom                SetEckertIV                         
EPSGTreatsAsLatLong           SetEckertVI                         
EPSGTreatsAsNorthingEasting   SetEquirectangular                  
ExportToMICoordSys            SetEquirectangular2                 
ExportToPCI                   SetFromUserInput                    
ExportToPrettyWkt             SetGEOS                             
ExportToProj4                 SetGH                               
ExportToUSGS                  SetGS                               
ExportToWkt                   SetGaussSchreiberTMercator          
ExportToXML                   SetGeocCS                           
Fixup                         SetGeogCS                           
FixupOrdering                 SetGnomonic                         
GetAngularUnits               SetHOM                              
GetAngularUnitsName           SetHOM2PNO                          
GetAttrValue                  SetIGH                              
GetAuthorityCode              SetKrovak                           
GetAuthorityName              SetLAEA                             
GetAxisName                   SetLCC                              
GetAxisOrientation            SetLCC1SP                           
GetInvFlattening              SetLCCB                             
GetLinearUnits                SetLinearUnits                      
GetLinearUnitsName            SetLinearUnitsAndUpdateParameters   
GetNormProjParm               SetLocalCS                          
GetProjParm                   SetMC                               
GetSemiMajor                  SetMercator                         
GetSemiMinor                  SetMollweide                        
GetTOWGS84                    SetNZMG                             
GetTargetLinearUnits          SetNormProjParm                     
GetUTMZone                    SetOS                               
ImportFromEPSG                SetOrthographic                     
ImportFromEPSGA               SetPS                               
ImportFromERM                 SetPolyconic                        
ImportFromESRI                SetProjCS                           
ImportFromMICoordSys          SetProjParm                         
ImportFromOzi                 SetProjection                       
ImportFromPCI                 SetRobinson                         
ImportFromProj4               SetSOC                              
ImportFromUSGS                SetSinusoidal                       
ImportFromUrl                 SetStatePlane                       
ImportFromWkt                 SetStereographic                    
ImportFromXML                 SetTM                               
IsCompound                    SetTMG                              
IsGeocentric                  SetTMSO                             
IsGeographic                  SetTMVariant                        
IsLocal                       SetTOWGS84                          
IsProjected                   SetTargetLinearUnits                
IsSame                        SetUTM                              
IsSameGeogCS                  SetVDG                              
IsSameVertCS                  SetVertCS                           
IsVertical                    SetWellKnownGeogCS                  
MorphFromESRI                 StripCTParms                        
MorphToESRI                   Validate                            
SetACEA                       __str__                             
SetAE                         clone                               
SetAngularUnits               delete                              
SetAttrValue                  equals                              
SetAuthority                  hashCode                            
SetBonne                      toString                            
SetCEA            

cala> newSR.ImportFrom
ImportFromEPSG    ImportFromESRI         ImportFromPCI     ImportFromUrl   
ImportFromEPSGA   ImportFromMICoordSys   ImportFromProj4   ImportFromWkt   
ImportFromERM     ImportFromOzi          ImportFromUSGS    ImportFromXML   

scala> newSR.ImportFromEPSG(3035)
res2: Int = 0

scala> newSR
res3: org.gdal.osr.SpatialReference =
PROJCS["ETRS89 / LAEA Europe",
    GEOGCS["ETRS89",
        DATUM["European_Terrestrial_Reference_System_1989",
            SPHEROID["GRS 1980",6378137,298.257222101,
                AUTHORITY["EPSG","7019"]],
            TOWGS84[0,0,0,0,0,0,0],
            AUTHORITY["EPSG","6258"]],
        PRIMEM["Greenwich",0,
            AUTHORITY["EPSG","8901"]],
        UNIT["degree",0.0174532925199433,
            AUTHORITY["EPSG","9122"]],
        AUTHORITY["EPSG","4258"]],
    PROJECTION["Lambert_Azimuthal_Equal_Area"],
    PARAMETER["latitude_of_center",52],
    PARAMETER["longitude_of_center",10],
    PARAMETER["false_easting",4321000],
    PARAMETER["false_northing",3210000],
    UNIT["metre",1,
        AUTHORITY["EPSG","9001"]],
    AUTHORITY["EPSG","30...

scala> val newSR2 = new org.gdal.osr.SpatialReference()
newSR2: org.gdal.osr.SpatialReference =

scala> newSR2.ImportFromURL("http://spatialreference.org/ref/epsg/3035/proj4/")
<console>:13: error: value ImportFromURL is not a member of org.gdal.osr.SpatialReference
       newSR2.ImportFromURL("http://spatialreference.org/ref/epsg/3035/proj4/")
              ^

scala> newSR2.ImportFrom
ImportFromEPSG    ImportFromESRI         ImportFromPCI     ImportFromUrl   
ImportFromEPSGA   ImportFromMICoordSys   ImportFromProj4   ImportFromWkt   
ImportFromERM     ImportFromOzi          ImportFromUSGS    ImportFromXML   

scala> newSR2.ImportFromProj4("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
res6: Int = 0

scala> newSR2
res7: org.gdal.osr.SpatialReference =
PROJCS["unnamed",
    GEOGCS["GRS 1980(IUGG, 1980)",
        DATUM["unknown",
            SPHEROID["GRS80",6378137,298.257222101]],
        PRIMEM["Greenwich",0],
        UNIT["degree",0.0174532925199433]],
    PROJECTION["Lambert_Azimuthal_Equal_Area"],
    PARAMETER["latitude_of_center",52],
    PARAMETER["longitude_of_center",10],
    PARAMETER["false_easting",4321000],
    PARAMETER["false_northing",3210000],
    UNIT["Meter",1]]

cala> newSR3.ImportFromWkt("""PROJCS["ETRS89 / ETRS-LAEA",
     |     GEOGCS["ETRS89",
     |         DATUM["European_Terrestrial_Reference_System_1989",
     |             SPHEROID["GRS 1980",6378137,298.257222101,
     |                 AUTHORITY["EPSG","7019"]],
     |             AUTHORITY["EPSG","6258"]],
     |         PRIMEM["Greenwich",0,
     |             AUTHORITY["EPSG","8901"]],
     |         UNIT["degree",0.01745329251994328,
     |             AUTHORITY["EPSG","9122"]],
     |         AUTHORITY["EPSG","4258"]],
     |     UNIT["metre",1,
     |         AUTHORITY["EPSG","9001"]],
     |     PROJECTION["Lambert_Azimuthal_Equal_Area"],
     |     PARAMETER["latitude_of_center",52],
     |     PARAMETER["longitude_of_center",10],
     |     PARAMETER["false_easting",4321000],
     |     PARAMETER["false_northing",3210000],
     |     AUTHORITY["EPSG","3035"],
     |     AXIS["X",EAST],
     |     AXIS["Y",NORTH]]""")
res9: Int = 0


scala> val newSR3 = new org.gdal.osr.SpatialReference()
newSR3: org.gdal.osr.SpatialReference =

scala> newSR3.ImportFromWkt("""PROJCS["ETRS89 / ETRS-LAEA",
     |     GEOGCS["ETRS89",
     |         DATUM["European_Terrestrial_Reference_System_1989",
     |             SPHEROID["GRS 1980",6378137,298.257222101,
     |                 AUTHORITY["EPSG","7019"]],
     |             AUTHORITY["EPSG","6258"]],
     |         PRIMEM["Greenwich",0,
     |             AUTHORITY["EPSG","8901"]],
     |         UNIT["degree",0.01745329251994328,
     |             AUTHORITY["EPSG","9122"]],
     |         AUTHORITY["EPSG","4258"]],
     |     UNIT["metre",1,
     |         AUTHORITY["EPSG","9001"]],
     |     PROJECTION["Lambert_Azimuthal_Equal_Area"],
     |     PARAMETER["latitude_of_center",52],
     |     PARAMETER["longitude_of_center",10],
     |     PARAMETER["false_easting",4321000],
     |     PARAMETER["false_northing",3210000],
     |     AUTHORITY["EPSG","3035"],
     |     AXIS["X",EAST],
     |     AXIS["Y",NORTH]]""")
res9: Int = 0

scala> newSR3
res10: org.gdal.osr.SpatialReference =
PROJCS["ETRS89 / ETRS-LAEA",
    GEOGCS["ETRS89",
        DATUM["European_Terrestrial_Reference_System_1989",
            SPHEROID["GRS 1980",6378137,298.257222101,
                AUTHORITY["EPSG","7019"]],
            AUTHORITY["EPSG","6258"]],
        PRIMEM["Greenwich",0,
            AUTHORITY["EPSG","8901"]],
        UNIT["degree",0.01745329251994328,
            AUTHORITY["EPSG","9122"]],
        AUTHORITY["EPSG","4258"]],
    UNIT["metre",1,
        AUTHORITY["EPSG","9001"]],
    PROJECTION["Lambert_Azimuthal_Equal_Area"],
    PARAMETER["latitude_of_center",52],
    PARAMETER["longitude_of_center",10],
    PARAMETER["false_easting",4321000],
    PARAMETER["false_northing",3210000],
    AUTHORITY["EPSG","3035"],
    AXIS["X",EAST],
    AXIS["...
scala> 

_________________________________-

Now I will give it a try with Pulkovo 1942(58)/Stereo 70, ESPG 3844, http://spatialreference.org/ref/epsg/3844/.
Non-military large and medium scale topographic map for Romania.



