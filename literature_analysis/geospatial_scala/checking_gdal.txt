Checking GDAL in Scala

- I've placed the gdal-2.21.jar in the lib directory of the DeepLearning Scala project and hope to get the functionality of the GDAL, OGR and OSR libraries in Scala. 


- The main aim is to check if I can make the code from Chris Garrard (Geoprocessing with Python, 2015) work in Scala too.

_________________________________



scala> import org.gdal._
import org.gdal._

scala> org.gdal.
gdal   gdalconst   gnm   ogr   osr

scala> org.gdal.ogr.
DataSource    FieldDefn       ProgressCallback       ogrConstants   
Driver        GeomFieldDefn   StyleTable             ogrJNI         
Feature       Geometry        TermProgressCallback                  
FeatureDefn   Layer           ogr          

scala> org.gdal.gdal.
AsyncReader            GridOptions            Transformer              
Band                   InfoOptions            TranslateOptions         
BuildVRTOptions        MajorObject            VectorTranslateOptions   
ColorTable             NearblackOptions       WarpOptions              
DEMProcessingOptions   ProgressCallback       XMLNode                  
Dataset                RasterAttributeTable   XMLNodeType              
Driver                 RasterizeOptions       gdal                     
GCP                    TermProgressCallback   gdalJNI                  

cala> org.gdal.osr.
CoordinateTransformation   SpatialReference   osr   osrConstants   osrJNI


__________________________________________

A) Background on geoprocessing: Introduction (from C.Garrard, 2015)

1) Types of spatial data

- vector data 
- raster data

Vector data is made up of points, lines and polygons.
Raster data is a two- or three-dimensional array of data values.

The features on a map are items of interest like e.g. roads, country boundaries, weather stations, etc..  Features have attributes attached to them such as name and recorded variables. Using digital data, has the advantage of attaching multiple attribute values to each feature, whether you plan to display the information on a map or analyse the data.

Spatial overlay analyses are easy using vactor data.

Raster data is well suited to any continuous data (e.g. aerial photos, satellite imagery). A grid of values can capture local variation more easily (e.g. temperature, rainfall, elevation - in Digital Elevation Models DEMs, vegetation mapping). 
Blocks of adjacent pixels can be used to calculate useful information like the slope from DEMs, which can be further used to estimate the runoff. This type of information gaining is done using windows (sets of pixels, for which we find the variable we want for the central pixel). You move a window around a raster so each pixel is in the center of its own window. 

Vector and raster data can also be used together.  
   

GEOPROCESSING IS A GENERAL TERM FOR MANIPULATING SPATIAL DATA (WHETHER RASTER OR VECTOR DATA). 

Simple vector geoprocessing: overlay and proximity analyses.
Simple raster geoprocessing: resizing pixels, performing calculations based on multiple datasets, moving windows analyses.

Using a programming language allows you to customize your analysis instead of being limited to what the software user interface allows. Also, it allows you to process many datasets at once. 

Free and open source software is not only free with regard to price but allows for customization. You don't give up quality by using open source tools. In fact several of these packages are also used by proprietary software. 


B) Background on geoprocessing: Reading and writing vector data (from C.Garrard, 2015)

The types of data, where the features of interest are all distinct objects, are called vector datasets.
For manipulating vector datasets we will use the OGR library (to read, writem and edit these types for later use).

VECTOR DATA ARE DATA IN WHICH THE FEATURES OF INTEREST ARE REPRESENTED AS DISCRETE GEOMETRIES (POINTS, LINES, AND POLYGONS). Such features have distinct boundaries, but countinuous data such as elevetion don't. For example, polygons showing subalpine zones for a region would be a good proxy for an elevation range, but you lose much of the detailed elevation data within those polygons. Vector data candidates are for example roads, power lines, rivers, lakes, landownerships,counties and countries, cities, restaurants, mountain peaks, etc.. 
