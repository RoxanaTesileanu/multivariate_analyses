Using LAPACK
Author: Roxana Tesileanu, roxana.te@web.de
Date: November 2017
Affiliation: INCDS BV


From the Maven repository get the coordinates for the LAPACK package:

// https://mvnrepository.com/artifact/com.github.fommil.netlib/core
"com.github.fommil.netlib" % "core" % "1.1.2"

Next, add the Maven coordinates to the build.sbt file of the Scala project.

__________________________________________

My first research questions I need to deal with are:
- how can I turn a Scala 2D Array into a Fortran matrix which I can decompose with LAPACK?
- is the netlib core-1.1.2.jar as easy to use in Scala as the GDAL.jar? 
(i.e. how exactly can I access its functions?)

________________________________________   

SOLVING SYSTEMS OF LINEAR EQUATIONS WITH DGESV ROUTINE:

Ax=b

Suppose I have the matrix A which is a Scala 2D Array, a vector x of unknowns, and a vector b of constants (entries for the response variable):

val A = Array(Array(3,1,0), Array(-1, 2, 2), Array(5, 0, -1))
val b = Array(6, -7, 10)
import com.github.fommil.netlib.LAPACK.{getInstance => lapack}
lapack.dgesv(....??.....)

From the java api for DGESV (http://icl.cs.utk.edu/projectsfiles/f2j/javadoc/index.html) the arguments for is are:

Input:
N - is an integer, and denotes the number of linear equations (for my case from above is 3)

NRHS - the no. of column of b (in my case 1)
LDA - is the leading dimension of A (I guess it is the size, i.e. (3,3))

LDB - an integer with the leading dimension of B (i.e. (3,1))
 

Output:
IPIV - the pivot indices that define the permutation P (I guess it represents the operations of row reduction necessary to get the L and U matrices...)

B - the input/output -> input is the array with the response variable entries and the output is the array with the system solution 

INFO - =0 successful exit; <0 the i-th argument has an illegal value; >0 factor U is singular, so the solution could not be computed.

DGESV Method Detail:
public static void DGESV(int n,
                         int nrhs,
                         double[][] a,
                         int[] ipiv,
                         double[][] b,
                         intW info)

Scala Implementation:

lapack.dgesv(3, 1, A, b)

Testing the code in Scala REPL:

scala> import com.github.fommil.netlib.LAPACK.{getInstance => lapack}
import com.github.fommil.netlib.LAPACK.{getInstance=>lapack}

scala> lapack.dges
dgesc2   dgesdd   dgesv   dgesvd   dgesvx

scala> val A : Array[Array[Double]]= Array(Array(3,1,0), Array(-1, 2, 2), Array(5, 0, -1))
A: Array[Array[Double]] = Array(Array(3.0, 1.0, 0.0), Array(-1.0, 2.0, 2.0), Array(5.0, 0.0, -1.0))

scala> val b : Array[Array[Double]]= Array(Array(6, -7, 10))
b: Array[Array[Double]] = Array(Array(6.0, -7.0, 10.0))

scala> lapack.dgesv(3,1,A,b)
<console>:11: error: Class org.netlib.util.intW not found - continuing with a stub.
       import com.github.fommil.netlib.LAPACK.{getInstance => lapack}
              ^
<console>:15: error: overloaded method value dgesv with alternatives:
  (x$1: Int,x$2: Int,x$3: Array[Double],x$4: Int,x$5: Int,x$6: Array[Int],x$7: Int,x$8: Array[Double],x$9: Int,x$10: Int,x$11: (some other)org.netlib.util.intW(in <none>))Unit <and>
  (x$1: Int,x$2: Int,x$3: Array[Double],x$4: Int,x$5: Array[Int],x$6: Array[Double],x$7: Int,x$8: org.netlib.util.intW(in <none>))Unit
 cannot be applied to (Int, Int, Array[Array[Double]], Array[Array[Double]])
       lapack.dgesv(3,1,A,b)
              ^
I'VE ADDED TO THE build.sbt FILE THE :
"net.sourceforge.f2j" % "arpack_combined_all" % "0.1"

_________ 


     
