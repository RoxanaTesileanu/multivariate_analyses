Checking BLAS library
Author: Roxana Tesileanu, roxana.te@web.de
Affiliation: INCDS BV
Date: November 2017

As indicated on prof. Wilkinson's research blog, I will try to use BLAS for implementing multivariate techinques.

The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. The Level 1 BLAS perform scalar, vector and vector-vector operations, the Level 2 BLAS perform matrix-vector operations, and the Level 3 BLAS perform matrix-matrix operations. Because the BLAS are efficient, portable, and widely available, they are commonly used in the development of high quality linear algebra software (from http://www.netlib.org/blas/faq.html).

Install on Ubuntu:
sudo apt-get install libatlas-base-dev libatlas-doc
(from https://askubuntu.com/questions/623578/installing-blas-and-lapack-packages)
- Ubuntu doesn't have a binary distribution of either cblas or openblas, but it has ATLAS (https://stackoverflow.com/questions/25065113/blas-lapack-not-installed-how-to-install-it)

See the atlas package on Ubuntu at:
https://launchpad.net/ubuntu/+source/atlas


---------------------------

I could try to stick to prof. Wilkinson's hint and try out the following import:

scala> import com.github.fommil.netlib.BLAS.{getInstance => blas}
import com.github.fommil.netlib.BLAS.{getInstance=>blas}

Reference:
https://github.com/darrenjw/scala-glm/blob/master/src/main/scala/scalaglm/Glm.scala 

------------------------------------------
F2J

http://icl.cs.utk.edu/f2j/
Our primary motivation is to provide numerical linear algebra software originally written in Fortran as Java class files. The numerical libraries will be distributed as class files produced by a Fortran-to-Java translator, f2j. The f2j translator is a formal compiler that translates programs written using a subset of Fortran77 into a form that may be executed on Java virtual machines(JVM). The first priority of f2j is to translate the BLAS and LAPACK numerical libraries from their Fortran77 reference source code to Java class files. We have also used f2j to produce a Java translation of the ARPACK library.

For the buid.sbt file:
// https://mvnrepository.com/artifact/net.sourceforge.f2j/arpack_combined_all
libraryDependencies += "net.sourceforge.f2j" % "arpack_combined_all" % "0.1"


______________________________________

The javadoc of org.netlib.blas:

http://icl.cs.utk.edu/projectsfiles/f2j/javadoc/index.html

______________________________

scala> import com.github.fommil.netlib.BLAS.{getInstance => blas}
import com.github.fommil.netlib.BLAS.{getInstance=>blas}

scala> blas.
dasum   dnrm2    dspr     dsyrk   dtrsv    sdsdot   srotm    ssymm    stpmv   
daxpy   drot     dspr2    dtbmv   idamax   sgbmv    srotmg   ssymv    stpsv   
dcopy   drotg    dswap    dtbsv   isamax   sgemm    ssbmv    ssyr     strmm   
ddot    drotm    dsymm    dtpmv   lsame    sgemv    sscal    ssyr2    strmv   
dgbmv   drotmg   dsymv    dtpsv   sasum    sger     sspmv    ssyr2k   strsm   
dgemm   dsbmv    dsyr     dtrmm   saxpy    snrm2    sspr     ssyrk    strsv   
dgemv   dscal    dsyr2    dtrmv   scopy    srot     sspr2    stbmv            
dger    dspmv    dsyr2k   dtrsm   sdot     srotg    sswap    stbsv            


___________________________________________

scala> import com.github.fommil.netlib.BLAS.{getInstance => lapack}
import com.github.fommil.netlib.BLAS.{getInstance=>lapack}

scala> lapack.
dasum   dnrm2    dspr     dsyrk   dtrsv    sdsdot   srotm    ssymm    stpmv   
daxpy   drot     dspr2    dtbmv   idamax   sgbmv    srotmg   ssymv    stpsv   
dcopy   drotg    dswap    dtbsv   isamax   sgemm    ssbmv    ssyr     strmm   
ddot    drotm    dsymm    dtpmv   lsame    sgemv    sscal    ssyr2    strmv   
dgbmv   drotmg   dsymv    dtpsv   sasum    sger     sspmv    ssyr2k   strsm   
dgemm   dsbmv    dsyr     dtrmm   saxpy    snrm2    sspr     ssyrk    strsv   
dgemv   dscal    dsyr2    dtrmv   scopy    srot     sspr2    stbmv            
dger    dspmv    dsyr2k   dtrsm   sdot     srotg    sswap    stbsv            




Further Documentation:
User Guide Lapack:
http://www.netlib.org/lapack/lug/

LAPACK Users' Guide (Third Edition)
UPDATED: 22 Aug 1999
Anderson, Bai, Bischof, Blackford, Demmel, Dongarra, Du Croz, Greenbaum, Hammarling, McKenney, Soresen


A)

Naming Scheme (http://www.netlib.org/lapack/lug/node24.html): XYYZZZ
1)X stands for:
D - is for Double precision no.
S - is for Real no.
C - Complex
Z - Complex*16 or Double Complex

2) YY stands for:
-the type of matrix
DI - diagonal
GG - general matrices
SY - symmetric
etc.

3) ZZZ stands for:
- the computation performed
see section 2.4.
E.g.:
- linear equations
- orthogonal factorizations and linear least squares problems: QR factorization, LQ factorization, etc, eigenproblems (eigenvalues, eigenvectors), singular value decomposition, etc. 

Naming scheme examples:
- xyySVX - all expert driver routines for systems of linear equations
- SGEBRS - a single precision routine that performs a bidiagonal reduction (BRD) of a real general matrix

B)

Linear Equations (http://www.netlib.org/lapack/lug/node26.html)

Two types of driver routines are provided for solving systems of linear equations:
- a simple driver (name ending -SV), which solves the system AX = B by factorizing A and overwriting B with the solution X;
- an expert driver (name ending -SVX), which can also perform the additional functions (some of them optionally)

Driver routines for linear equations: 
ex: general matrix, simple driver -	SGESV 	CGESV 	DGESV 	ZGESV


C)
Linear Least Squares (LLS) Problems 
(from http://www.netlib.org/lapack/lug/node27.html)

The linear least squares problem is: 
minimize the squared residuals
min(b-Ax)^2
where A is an m-by-n matrix, b is a given m element vector and x is the n element solution vector.

Driver routines for linear least squares problems: 
solve LLS using QR or LQ factorization 	SGELS 	CGELS 	DGELS 	ZGELS
solve LLS using complete orthogonal factorization SGELSY CGELSY DGELSY 	ZGELSY
solve LLS using SVD 	SGELSS 	CGELSS 	DGELSS 	ZGELSS
solve LLS using divide-and-conquer SVD 	SGELSD 	CGELSD 	DGELSD 	ZGELSD


_____________________________________

I only have the basic BLAS levels available.
So, I've installed LAPACK:
sudo apt-get install liblapack-dev liblapack-doc-man liblapack-doc liblapack-pic liblapack3 liblapack-test liblapacke liblapacke-dev

