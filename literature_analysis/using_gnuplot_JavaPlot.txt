Using the Java wrapper of Gnuplot, JavaPlot, in Scala   
Author: Roxana Tesileanu, INCDS BV, roxana.te@web.de

JavaPlot is a pure Java programming interface library for GNUPlot.


Add the following dependency to your build.sbt file:
// https://mvnrepository.com/artifact/com.panayotis/javaplot
libraryDependencies += "com.panayotis" % "javaplot" % "0.5.0"

The first example bellow is from:
https://stackoverflow.com/questions/9331548/javaplot-and-gnuplot

and from 

http://javaplot.panayotis.com/example.html

and works perfectly!

The javadoc is at:
http://javaplot.panayotis.com/doc/index.html

I'll try to implement some examaples from P. K. Janert ("Gnuplot in Action - Understanding Data with Graphs", 2010, Manning). 

 
_______________new REPL session ___________________

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@36a47ce6

scala> p.addPlot("sin(x)"))
<console>:1: error: ';' expected but ')' found.
p.addPlot("sin(x)"))
                   ^

scala> p.addPlot("sin(x)")

scala> p.plot()

AND THE PLOT APPEARED!
_____________________________________________________

PLOTTING ONE FUNCTION:

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@66263ce0

scala> p.addPlot("besj0(x)")

scala> p.plot()

OK.
-------------------------------------------------------------

scala> val xs = Array(1,2,3,4,5,6)
xs: Array[Int] = Array(1, 2, 3, 4, 5, 6)

scala> val ys = xs.map(_ = 0.5)
<console>:13: error: reassignment to val
       val ys = xs.map(_ = 0.5)
                         ^

scala> val ys = xs.map(_ + 0.5)
ys: Array[Double] = Array(1.5, 2.5, 3.5, 4.5, 5.5, 6.5)

scala> p.addPlot("xs,ys, with points pt 7")

scala> p.plot()

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@3bfc6bdc

scala> p.addPlot("xs,ys, with points pt 7")

scala> p.plot()

------------------------------------------

PLOTTING TWO FUNCTIONS:
scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@7b769db4

scala> p.addPlot("sin(x), x")

scala> p.plot()

OK.

----------------------------------------------
CHOSING THE RANGES FOR X-Y AXES:


scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@49f75537

scala> p.
addGraph         getLayout       getPreInit    set              setPersist    
addPlot          getPage         getTerminal   setGNUPlotPath   setTerminal   
getAxis          getParameters   newGraph      setKey           setTitle      
getCommands      getPlots        newGraph3D    setMultiTitle                  
getGNUPlotPath   getPostInit     plot          setParameters                  

scala> p.addPlot("[] [-2:2] sin(x), x")	

THE FIRST PAIR OF SQUARE BRACKETS IS FOR THE X RANGE AND THE SECOND FOR THE Y RANGE! 

scala> p.plot()

OK.
----------------------------------------------------------

scala> import com.panayotis.gnuplot.dataset.FileDataSet
import com.panayotis.gnuplot.dataset.FileDataSet

scala> new FileDataSet(new java.io.File ("prices.dat"))
java.lang.NumberFormatException: The point added with value "pqr" and index 1 is not valid with parser com.panayotis.gnuplot.dataset.parser.DoubleDataParser
  at com.panayotis.gnuplot.dataset.GenericDataSet.checkData(GenericDataSet.java:123)
  at com.panayotis.gnuplot.dataset.GenericDataSet.add(GenericDataSet.java:111)
  at com.panayotis.gnuplot.dataset.FileDataSet.<init>(FileDataSet.java:59)
  ... 42 elided



scala> val ds = new FileDataSet(scala.io.Source.fromFile("prices.dat"))
<console>:13: error: type mismatch;
 found   : scala.io.BufferedSource
 required: java.io.File
       val ds = new FileDataSet(scala.io.Source.fromFile("prices.dat"))
                                                        ^

scala> new FileDataSet(new java.io.File ("prices"))
res58: com.panayotis.gnuplot.dataset.FileDataSet = com.panayotis.gnuplot.dataset.FileDataSet@5ac9be17

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@119ffccd

scala> p.addPlot("res58")

scala> p.plot()

scala> res58.
add   getDimensions   getPointValue   size

scala> res58.size
res64: Int = 21

------------------------------------------
PLOTTTING WITH DATA FROM FILE:


scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> import com.panayotis.gnuplot.dataset.FileDataSet
import com.panayotis.gnuplot.dataset.FileDataSet

scala> new FileDataSet(new java.io.File ("prices"))
res0: com.panayotis.gnuplot.dataset.FileDataSet = com.panayotis.gnuplot.dataset.FileDataSet@de5360f

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@2ed9cead

scala> p.addPlot(res0)

scala> p.plot()

OK.
--------------------------------------------------


