Using the Java wrapper of Gnuplot, JavaPlot, in Scala   
Author: Roxana Tesileanu, INCDS BV, roxana.te@web.de

JavaPlot is a pure Java programming interface library for GNUPlot.


Add the following dependency to your build.sbt file:
// https://mvnrepository.com/artifact/com.panayotis/javaplot
libraryDependencies += "com.panayotis" % "javaplot" % "0.5.0"

The first example bellow is from:
https://stackoverflow.com/questions/9331548/javaplot-and-gnuplot

and from 

http://javaplot.panayotis.com/example.html

and works perfectly!

The javadoc is at:
http://javaplot.panayotis.com/doc/index.html

I'll try to implement some examaples from P. K. Janert ("Gnuplot in Action - Understanding Data with Graphs", 2010, Manning). 

 
_______________new REPL session ___________________

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@36a47ce6

scala> p.addPlot("sin(x)"))
<console>:1: error: ';' expected but ')' found.
p.addPlot("sin(x)"))
                   ^

scala> p.addPlot("sin(x)")

scala> p.plot()

AND THE PLOT APPEARED!
_____________________________________________________

PLOTTING ONE FUNCTION:

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@66263ce0

scala> p.addPlot("besj0(x)")

scala> p.plot()

OK.
-------------------------------------------------------------

scala> val xs = Array(1,2,3,4,5,6)
xs: Array[Int] = Array(1, 2, 3, 4, 5, 6)

scala> val ys = xs.map(_ = 0.5)
<console>:13: error: reassignment to val
       val ys = xs.map(_ = 0.5)
                         ^

scala> val ys = xs.map(_ + 0.5)
ys: Array[Double] = Array(1.5, 2.5, 3.5, 4.5, 5.5, 6.5)

scala> p.addPlot("xs,ys, with points pt 7")

scala> p.plot()

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@3bfc6bdc

scala> p.addPlot("xs,ys, with points pt 7")

scala> p.plot()

------------------------------------------

PLOTTING TWO FUNCTIONS:
scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@7b769db4

scala> p.addPlot("sin(x), x")

scala> p.plot()

OK.

----------------------------------------------
CHOSING THE RANGES FOR X-Y AXES:


scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@49f75537

scala> p.
addGraph         getLayout       getPreInit    set              setPersist    
addPlot          getPage         getTerminal   setGNUPlotPath   setTerminal   
getAxis          getParameters   newGraph      setKey           setTitle      
getCommands      getPlots        newGraph3D    setMultiTitle                  
getGNUPlotPath   getPostInit     plot          setParameters                  

scala> p.addPlot("[] [-2:2] sin(x), x")	

THE FIRST PAIR OF SQUARE BRACKETS IS FOR THE X RANGE AND THE SECOND FOR THE Y RANGE! 

scala> p.plot()

OK.
----------------------------------------------------------

scala> import com.panayotis.gnuplot.dataset.FileDataSet
import com.panayotis.gnuplot.dataset.FileDataSet

scala> new FileDataSet(new java.io.File ("prices.dat"))
java.lang.NumberFormatException: The point added with value "pqr" and index 1 is not valid with parser com.panayotis.gnuplot.dataset.parser.DoubleDataParser
  at com.panayotis.gnuplot.dataset.GenericDataSet.checkData(GenericDataSet.java:123)
  at com.panayotis.gnuplot.dataset.GenericDataSet.add(GenericDataSet.java:111)
  at com.panayotis.gnuplot.dataset.FileDataSet.<init>(FileDataSet.java:59)
  ... 42 elided



scala> val ds = new FileDataSet(scala.io.Source.fromFile("prices.dat"))
<console>:13: error: type mismatch;
 found   : scala.io.BufferedSource
 required: java.io.File
       val ds = new FileDataSet(scala.io.Source.fromFile("prices.dat"))
                                                        ^

scala> new FileDataSet(new java.io.File ("prices"))
res58: com.panayotis.gnuplot.dataset.FileDataSet = com.panayotis.gnuplot.dataset.FileDataSet@5ac9be17

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@119ffccd

scala> p.addPlot("res58")

scala> p.plot()

scala> res58.
add   getDimensions   getPointValue   size

scala> res58.size
res64: Int = 21

------------------------------------------
PLOTTTING WITH DATA FROM FILE:


scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> import com.panayotis.gnuplot.dataset.FileDataSet
import com.panayotis.gnuplot.dataset.FileDataSet

scala> new FileDataSet(new java.io.File ("prices"))
res0: com.panayotis.gnuplot.dataset.FileDataSet = com.panayotis.gnuplot.dataset.FileDataSet@de5360f

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@2ed9cead

scala> p.addPlot(res0)

scala> p.plot()

OK.
--------------------------------------------------

cala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@28a92f9e

scala> p.addPlot(res0+"using 1:2")

scala> p.plot()

scala> import com.panayotis.gnuplot.plot.DataSetPlot
import com.panayotis.gnuplot.plot.DataSetPlot

scala> DataSetPlot(res0)
<console>:16: error: object com.panayotis.gnuplot.plot.DataSetPlot is not a value
       DataSetPlot(res0)
       ^


scala> import com.panayotis.gnuplot.plot.DataSetPlot
import com.panayotis.gnuplot.plot.DataSetPlot

scala> new DataSetPlot(res0)
res33: com.panayotis.gnuplot.plot.DataSetPlot = {title="Datafile 15"}

cala> val d = new DataSetPlot()
d: com.panayotis.gnuplot.plot.DataSetPlot = {title="Datafile 19"}

scala> d.
appendProperties   equals         merge                set            
clear              forEach        put                  setDataSet     
clone              get            putAll               setPlotStyle   
compute            getDataSet     putIfAbsent          setSmooth      
computeIfAbsent    getOrDefault   remove               setTitle       
computeIfPresent   getPlotStyle   replace              size           
containsKey        hashCode       replaceAll           toString       
containsValue      isEmpty        retrieveData         unset          
entrySet           keySet         retrieveDefinition   values         

scala> d.setDataSet(res0)

scala> d.
appendProperties   equals         merge                set            
clear              forEach        put                  setDataSet     
clone              get            putAll               setPlotStyle   
compute            getDataSet     putIfAbsent          setSmooth      
computeIfAbsent    getOrDefault   remove               setTitle       
computeIfPresent   getPlotStyle   replace              size           
containsKey        hashCode       replaceAll           toString       
containsValue      isEmpty        retrieveData         unset          
entrySet           keySet         retrieveDefinition   values         

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@26ac0346

scala> p.add
addGraph   addPlot

scala> p.addPlot(d)

scala> p.plot()

IT CREATES THE PLOT. I WOULD LIKE TO SELECT THE COLUMNS INSIDE THE DS. 


------------------------------------------
I WOULD ACTUALLY LIKE TO USE ARRAYS AS INPUT:

scala> import com.panayotis.gnuplot.dataset.ArrayDataSet
import com.panayotis.gnuplot.dataset.ArrayDataSet

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> 

scala> val a = Array(1,2,5,7,9)
a: Array[Int] = Array(1, 2, 5, 7, 9)

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@5744914d

scala> val ds = new ArrayDataSet(a)
<console>:14: error: overloaded method constructor ArrayDataSet with alternatives:
  (x$1: Array[Array[String]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Long]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Int]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Float]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Double]])com.panayotis.gnuplot.dataset.ArrayDataSet
 cannot be applied to (Array[Int])
       val ds = new ArrayDataSet(a)
                ^

scala> val a: Array[Int] = Array(1,2,5,7,9)
a: Array[Int] = Array(1, 2, 5, 7, 9)

scala> val ds = new ArrayDataSet(a)
<console>:14: error: overloaded method constructor ArrayDataSet with alternatives:
  (x$1: Array[Array[String]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Long]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Int]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Float]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Double]])com.panayotis.gnuplot.dataset.ArrayDataSet
 cannot be applied to (Array[Int])
       val ds = new ArrayDataSet(a)
                ^

????
------------------------------------------
FROM: 

https://sourceforge.net/p/gnujavaplot/hg/ci/6d7d4b4b303db3cad8d6596eef6274c1bda7ef5d/tree/demo/src/demo.java


USING AN ARRAY AS INPUT:

scala> val a = Array(
     | Array(1.0, 1.5),
     | Array(2.0, 2.2),
     | Array(3.0, 3.0)
     | )
a: Array[Array[Double]] = Array(Array(1.0, 1.5), Array(2.0, 2.2), Array(3.0, 3.0))

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@2c3ef63a

scala> val ds= new DataSetPlot(a)
<console>:14: error: not found: type DataSetPlot
       val ds= new DataSetPlot(a)
                   ^

scala> import com.panayotis.gnuplot.plot.DataSetPlot
import com.panayotis.gnuplot.plot.DataSetPlot

scala> val ds= new DataSetPlot(a)
ds: com.panayotis.gnuplot.plot.DataSetPlot = {title="Datafile 31"}

scala> p.addPlot(s)
<console>:16: error: not found: value s
       p.addPlot(s)
                 ^

scala> p.addPlot(ds)

scala> p.plot

OK.

---------------------------------------------
