Using the Java wrapper of Gnuplot, JavaPlot, in Scala   
Author: Roxana Tesileanu, INCDS BV, roxana.te@web.de

JavaPlot is a pure Java programming interface library for GNUPlot.


Add the following dependency to your build.sbt file:
// https://mvnrepository.com/artifact/com.panayotis/javaplot
libraryDependencies += "com.panayotis" % "javaplot" % "0.5.0"

The first example bellow is from:
https://stackoverflow.com/questions/9331548/javaplot-and-gnuplot

and from 

http://javaplot.panayotis.com/example.html

and works perfectly!

The javadoc is at:
http://javaplot.panayotis.com/doc/index.html

I'll try to implement some examaples from P. K. Janert ("Gnuplot in Action - Understanding Data with Graphs", 2010, Manning). 

 
_______________new REPL session ___________________

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@36a47ce6

scala> p.addPlot("sin(x)")

scala> p.plot()

AND THE PLOT APPEARED!
_____________________________________________________

PLOTTING ONE FUNCTION:

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@66263ce0

scala> p.addPlot("besj0(x)")

scala> p.plot()

OK.
-------------------------------------------------------------

PLOTTING TWO FUNCTIONS:
scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@7b769db4

scala> p.addPlot("sin(x), x")

scala> p.plot()

OK.

----------------------------------------------
CHOSING THE RANGES FOR X-Y AXES:


scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@49f75537

scala> p.
addGraph         getLayout       getPreInit    set              setPersist    
addPlot          getPage         getTerminal   setGNUPlotPath   setTerminal   
getAxis          getParameters   newGraph      setKey           setTitle      
getCommands      getPlots        newGraph3D    setMultiTitle                  
getGNUPlotPath   getPostInit     plot          setParameters                  

scala> p.addPlot("[] [-2:2] sin(x), x")	

THE FIRST PAIR OF SQUARE BRACKETS IS FOR THE X RANGE AND THE SECOND FOR THE Y RANGE! 

scala> p.plot()

OK.
----------------------------------------------------------

scala> import com.panayotis.gnuplot.dataset.FileDataSet
import com.panayotis.gnuplot.dataset.FileDataSet

scala> new FileDataSet(new java.io.File ("prices"))
res58: com.panayotis.gnuplot.dataset.FileDataSet = com.panayotis.gnuplot.dataset.FileDataSet@5ac9be17

scala> res58.
add   getDimensions   getPointValue   size

scala> res58.size
res64: Int = 21

------------------------------------------
PLOTTTING WITH DATA FROM FILE:


scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> import com.panayotis.gnuplot.dataset.FileDataSet
import com.panayotis.gnuplot.dataset.FileDataSet

scala> new FileDataSet(new java.io.File ("prices"))
res0: com.panayotis.gnuplot.dataset.FileDataSet = com.panayotis.gnuplot.dataset.FileDataSet@de5360f

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@2ed9cead

scala> p.addPlot(res0)

scala> p.plot()

OK.
--------------------------------------------------

cala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@28a92f9e

scala> p.addPlot(res0+"using 1:2")

scala> p.plot()

scala> import com.panayotis.gnuplot.plot.DataSetPlot
import com.panayotis.gnuplot.plot.DataSetPlot

scala> DataSetPlot(res0)
<console>:16: error: object com.panayotis.gnuplot.plot.DataSetPlot is not a value
       DataSetPlot(res0)
       ^


scala> import com.panayotis.gnuplot.plot.DataSetPlot
import com.panayotis.gnuplot.plot.DataSetPlot

scala> new DataSetPlot(res0)
res33: com.panayotis.gnuplot.plot.DataSetPlot = {title="Datafile 15"}

cala> val d = new DataSetPlot()
d: com.panayotis.gnuplot.plot.DataSetPlot = {title="Datafile 19"}

scala> d.
appendProperties   equals         merge                set            
clear              forEach        put                  setDataSet     
clone              get            putAll               setPlotStyle   
compute            getDataSet     putIfAbsent          setSmooth      
computeIfAbsent    getOrDefault   remove               setTitle       
computeIfPresent   getPlotStyle   replace              size           
containsKey        hashCode       replaceAll           toString       
containsValue      isEmpty        retrieveData         unset          
entrySet           keySet         retrieveDefinition   values         

scala> d.setDataSet(res0)

scala> d.
appendProperties   equals         merge                set            
clear              forEach        put                  setDataSet     
clone              get            putAll               setPlotStyle   
compute            getDataSet     putIfAbsent          setSmooth      
computeIfAbsent    getOrDefault   remove               setTitle       
computeIfPresent   getPlotStyle   replace              size           
containsKey        hashCode       replaceAll           toString       
containsValue      isEmpty        retrieveData         unset          
entrySet           keySet         retrieveDefinition   values         

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@26ac0346

scala> p.add
addGraph   addPlot

scala> p.addPlot(d)

scala> p.plot()

IT CREATES THE PLOT. I WOULD LIKE TO SELECT THE COLUMNS INSIDE THE DS. 


------------------------------------------
I WOULD ACTUALLY LIKE TO USE ARRAYS AS INPUT:

scala> import com.panayotis.gnuplot.dataset.ArrayDataSet
import com.panayotis.gnuplot.dataset.ArrayDataSet

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> 

scala> val a = Array(1,2,5,7,9)
a: Array[Int] = Array(1, 2, 5, 7, 9)

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@5744914d

scala> val ds = new ArrayDataSet(a)
<console>:14: error: overloaded method constructor ArrayDataSet with alternatives:
  (x$1: Array[Array[String]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Long]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Int]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Float]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Double]])com.panayotis.gnuplot.dataset.ArrayDataSet
 cannot be applied to (Array[Int])
       val ds = new ArrayDataSet(a)
                ^

scala> val a: Array[Int] = Array(1,2,5,7,9)
a: Array[Int] = Array(1, 2, 5, 7, 9)

scala> val ds = new ArrayDataSet(a)
<console>:14: error: overloaded method constructor ArrayDataSet with alternatives:
  (x$1: Array[Array[String]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Long]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Int]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Float]])com.panayotis.gnuplot.dataset.ArrayDataSet <and>
  (x$1: Array[Array[Double]])com.panayotis.gnuplot.dataset.ArrayDataSet
 cannot be applied to (Array[Int])
       val ds = new ArrayDataSet(a)
                ^

????
------------------------------------------
FROM: 

https://sourceforge.net/p/gnujavaplot/hg/ci/6d7d4b4b303db3cad8d6596eef6274c1bda7ef5d/tree/demo/src/demo.java


USING AN ARRAY AS INPUT:

scala> val a = Array(
     | Array(1.0, 1.5),
     | Array(2.0, 2.2),
     | Array(3.0, 3.0)
     | )
a: Array[Array[Double]] = Array(Array(1.0, 1.5), Array(2.0, 2.2), Array(3.0, 3.0))

scala> val p = new JavaPlot()
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@2c3ef63a

scala> import com.panayotis.gnuplot.plot.DataSetPlot
import com.panayotis.gnuplot.plot.DataSetPlot

scala> val ds= new DataSetPlot(a)
ds: com.panayotis.gnuplot.plot.DataSetPlot = {title="Datafile 31"}

scala> p.addPlot(ds)

scala> p.plot

OK.



---------------------------------------------


READ DATA FROM FILE, THEN USE IT IN FORM OF ARRAYS AS INPUT FOR THE JAVAPLOT:

scala> val src = scala.io.Source.fromFile("prices")
src: scala.io.BufferedSource = non-empty iterator

scala> val data = src.getLines.map(_.split(" ")).toArray
data: Array[Array[String]] = Array(Array(1975, 49, 162), Array(1976, 52, 144), Array(1977, 67, 140), Array(1978, 53, 122), Array(1979, 67, 125), Array(1980, 46, 117), Array(1981, 60, 116), Array(1982, 50, 113), Array(1983, 66, 96), Array(1984, 70, 101), Array(1985, 91, 93), Array(1986, 133, 92), Array(1987, 127, 95), Array(1988, 136, 79), Array(1989, 154, 78), Array(1990, 127, 85), Array(1991, 147, 71), Array(1992, 146, 54), Array(1993, 133, 51), Array(1994, 144, 49), Array(1995, 158, 43))

scala> src.close()

scala> val data2 = data.map( for (i<- _) yield (i.toDouble))
data2: Array[Array[Double]] = Array(Array(1975.0, 49.0, 162.0), Array(1976.0, 52.0, 144.0), Array(1977.0, 67.0, 140.0), Array(1978.0, 53.0, 122.0), Array(1979.0, 67.0, 125.0), Array(1980.0, 46.0, 117.0), Array(1981.0, 60.0, 116.0), Array(1982.0, 50.0, 113.0), Array(1983.0, 66.0, 96.0), Array(1984.0, 70.0, 101.0), Array(1985.0, 91.0, 93.0), Array(1986.0, 133.0, 92.0), Array(1987.0, 127.0, 95.0), Array(1988.0, 136.0, 79.0), Array(1989.0, 154.0, 78.0), Array(1990.0, 127.0, 85.0), Array(1991.0, 147.0, 71.0), Array(1992.0, 146.0, 54.0), Array(1993.0, 133.0, 51.0), Array(1994.0, 144.0, 49.0), Array(1995.0, 158.0, 43.0))

scala> val data3 = data2.map( i=> Array(i(0), i(1)))
data3: Array[Array[Double]] = Array(Array(1975.0, 49.0), Array(1976.0, 52.0), Array(1977.0, 67.0), Array(1978.0, 53.0), Array(1979.0, 67.0), Array(1980.0, 46.0), Array(1981.0, 60.0), Array(1982.0, 50.0), Array(1983.0, 66.0), Array(1984.0, 70.0), Array(1985.0, 91.0), Array(1986.0, 133.0), Array(1987.0, 127.0), Array(1988.0, 136.0), Array(1989.0, 154.0), Array(1990.0, 127.0), Array(1991.0, 147.0), Array(1992.0, 146.0), Array(1993.0, 133.0), Array(1994.0, 144.0), Array(1995.0, 158.0))

cala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> import com.panayotis.gnuplot.plot.DataSetPlot
import com.panayotis.gnuplot.plot.DataSetPlot

scala> val ds = new DataSetPlot(data3)
ds: com.panayotis.gnuplot.plot.DataSetPlot = {title="Datafile 32"}

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@617e85d4

scala> p.addPlot(ds)

scala> p.plot()

OK.

-----------------------------------

A 3D PLOT:

scala> import com.panayotis.gnuplot.JavaPlot
import com.panayotis.gnuplot.JavaPlot

scala> val p = new JavaPlot(true)
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@77c9c93f

scala> p.addPlot("sin(x)*y")

scala> p.plot()

OK.

----------------------------------------
SETTING A TITLE AND AN X-LABEL:

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@2c367bf3

scala> p.addPlot(ds)

scala> p.setTitle("Prices")

scala> p.getAxix("x").setLabel("Year", "Arial", 20)
<console>:15: error: value getAxix is not a member of com.panayotis.gnuplot.JavaPlot
       p.getAxix("x").setLabel("Year", "Arial", 20)
         ^

scala> p.getAxis("x").setLabel("Year", "Arial", 20)

scala> p.plot

OK. (only that the name of the Datafile is on the plot too)

----------------------------------------------
SETTING THE X- AND Y-LABELS AND THE TITLE:

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@3daa93de

scala> p.addPlot(ds)

scala> p.setTitle("Prices")

scala> p.getAxis("x").setLable("Year")
<console>:15: error: value setLable is not a member of com.panayotis.gnuplot.plot.Axis
       p.getAxis("x").setLable("Year")
                      ^

scala> p.getAxis("x").setLabel("Year")

scala> p.getAxis("y").setLabel("Price")

scala> p.plot


OK.

---------------------------------------
SETTING X- AND Y- RANGES (BOUNDARIES):

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@770960d9

scala> p.getAxis("x").setBoundaries(1980, 1990)

scala> p.getAxis("y").setBoundaries(80, 100)

scala> p.addPlot(ds)

scala> p.plot

OK.

------------------------------------------

CHECKING THE STYLE OPTIONS: 

scala> import com.panayotis.gnuplot.style.PlotStyle
import com.panayotis.gnuplot.style.PlotStyle

scala> import com.panayotis.gnuplot.style.Style
import com.panayotis.gnuplot.style.Style

scala> p.
addGraph         getLayout       getPreInit    set              setPersist    
addPlot          getPage         getTerminal   setGNUPlotPath   setTerminal   
getAxis          getParameters   newGraph      setKey           setTitle      
getCommands      getPlots        newGraph3D    setMultiTitle                  
getGNUPlotPath   getPostInit     plot          setParameters                  

scala> p.getPlots
res35: java.util.List[com.panayotis.gnuplot.plot.Plot] = [{title="Datafile 36"}]

scala> res35.
add           forEach    lastIndexOf      removeIf     sort          
addAll        get        listIterator     replaceAll   spliterator   
clear         indexOf    parallelStream   retainAll    stream        
contains      isEmpty    remove           set          subList       
containsAll   iterator   removeAll        size         toArray       

scala> res35.get(1)
java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
  at java.util.ArrayList.rangeCheck(ArrayList.java:657)
  at java.util.ArrayList.get(ArrayList.java:433)
  ... 42 elided

scala> res35.
add           forEach    lastIndexOf      removeIf     sort          
addAll        get        listIterator     replaceAll   spliterator   
clear         indexOf    parallelStream   retainAll    stream        
contains      isEmpty    remove           set          subList       
containsAll   iterator   removeAll        size         toArray       

scala> res35.get(0)
res38: com.panayotis.gnuplot.plot.Plot = {title="Datafile 36"}

cala> val sty = new PlotStyle
sty: com.panayotis.gnuplot.style.PlotStyle = {}

cala> sty.setStyle(Style.POINTS)

scala> sty
res41: com.panayotis.gnuplot.style.PlotStyle = {}

scala> sty.setPointType(5)

scala> sty.setPointSize(8)

scala> p.
addGraph         getLayout       getPreInit    set              setPersist    
addPlot          getPage         getTerminal   setGNUPlotPath   setTerminal   
getAxis          getParameters   newGraph      setKey           setTitle      
getCommands      getPlots        newGraph3D    setMultiTitle                  
getGNUPlotPath   getPostInit     plot          setParameters                  

scala> p.plot

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@3d2dd901

scala> p.addPlot(ds)

scala> p.getLayout
res47: com.panayotis.gnuplot.layout.GraphLayout = com.panayotis.gnuplot.layout.AutoGraphLayout@47a0975b

scala> p.getCommands
res48: String =
"plot '-' title "Datafile 36"
1975.0 49.0
1976.0 52.0
1977.0 67.0
1978.0 53.0
1979.0 67.0
1980.0 46.0
1981.0 60.0
1982.0 50.0
1983.0 66.0
1984.0 70.0
1985.0 91.0
1986.0 133.0
1987.0 127.0
1988.0 136.0
1989.0 154.0
1990.0 127.0
1991.0 147.0
1992.0 146.0
1993.0 133.0
1994.0 144.0
1995.0 158.0
e
quit
"
cala> sty
res49: com.panayotis.gnuplot.style.PlotStyle = {pointtype=5, pointsize=8}

cala> ds.
appendProperties   entrySet       isEmpty       replaceAll           size       
clear              equals         keySet        retrieveData         toString   
clone              forEach        merge         retrieveDefinition   unset      
compute            get            put           set                  values     
computeIfAbsent    getDataSet     putAll        setDataSet                      
computeIfPresent   getOrDefault   putIfAbsent   setPlotStyle                    
containsKey        getPlotStyle   remove        setSmooth                       
containsValue      hashCode       replace       setTitle                        

scala> ds.getPlotStyle
res73: com.panayotis.gnuplot.style.PlotStyle = {}

scala> res73.setStyle(Style.POINTS)

scala> res73.setPointType(5)

scala> res73.setPointSize(9)

scala> p.plot

OK. ON THE DS VAL YOU CAN SET THE STYLE. 
-----------------------------------------------------------

CHANGING STYLE: COLOR, POINT TYPE, POINT SIZE

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@17df33a9

scala> p.addPlot(ds)

scala> val sty = ds.getPlotStyle
sty: com.panayotis.gnuplot.style.PlotStyle = {pointtype=5, pointsize=3}

scala> sty.setLineType(NamedPlotColor.BLUE)

scala> p.plot


OK.

----------------------------------------
MORE DATASETS IN ONE PLOT:

scala> p.addPlot(ds)

scala> p.addPlot("x")

scala> p.plot

OK.

-----------------------------------------

A MULTIPLOT:

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@48c2d24e

scala> p.addPlot(ds)

scala> p.newGraph()

scala> p.addPlot("sin(x)")


scala> p.setMultiTitle("A multiplot example")

scala> p.plot

OK.

--------------------------------------------

cala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@55928a2a

scala> p.addPlot(ds)

scala> p.newGraph()

scala> p.addPlot("sin(x)")

scala> val la = new StripeLayout()
la: com.panayotis.gnuplot.layout.StripeLayout = com.panayotis.gnuplot.layout.StripeLayout@43c8324b

scala> la.setColumns(100)

scala> p.getPage().setLayout(la)

scala> p.plot

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@70ff336d

scala> p.addPlot(ds)

scala> p.newGraph()

scala> p.addPlot("sin(x)")

scala> la.setColumns(9999)

scala> p.getPage().setLayout(la)

scala> p.plot

scala> val p = new JavaPlot
p: com.panayotis.gnuplot.JavaPlot = com.panayotis.gnuplot.JavaPlot@1812c324

scala> p.set
set              setKey          setParameters   setTerminal   
setGNUPlotPath   setMultiTitle   setPersist      setTitle      

scala> p.setKey()
<console>:20: error: not enough arguments for method setKey: (x$1: com.panayotis.gnuplot.JavaPlot.Key)Unit.
Unspecified value parameter x$1.
       p.setKey()
               ^

scala> 

scala> ds.
appendProperties   entrySet       isEmpty       replaceAll           size       
clear              equals         keySet        retrieveData         toString   
clone              forEach        merge         retrieveDefinition   unset      
compute            get            put           set                  values     
computeIfAbsent    getDataSet     putAll        setDataSet                      
computeIfPresent   getOrDefault   putIfAbsent   setPlotStyle                    
containsKey        getPlotStyle   remove        setSmooth                       
containsValue      hashCode       replace       setTitle                        

scala> sty.
appendProperties   containsValue   isEmpty       replace        setPointType   
clear              entrySet        keySet        replaceAll     setStyle       
clone              equals          merge         set            size           
compute            forEach         put           setFill        toString       
computeIfAbsent    get             putAll        setLineType    unset          
computeIfPresent   getOrDefault    putIfAbsent   setLineWidth   values         
containsKey        hashCode        remove        setPointSize                  



