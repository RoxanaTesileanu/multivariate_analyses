Using Linux as a development platform for Scala projects 

Author: Roxana Tesileanu, INCDS, roxana.te@web.de


References:	The Linux Command Line, William E. Shotts, Jr., 2009
		The Linux Development Platform, Rafeeq Ur Rehman, Christopher Paul, 2003
		VIM Tutor 1.7, Michael C. Pierce, Robert K. Ware (started in the shell with the vimtutor command) 
		vim-scala: Vim support for writing Scala code, Derek Wyatt, https://github.com/derekwyatt/vim-scala
		SBT in Action: the Simple Scala Build Tool, Joshua Suereth, Matthew Farwell, 2016


Components of a development system (Rehman, Paul 2003, p.10):
- hardware platform
- operating system
- editors
- compilers and assemblers
- debuggers
- version control system
- bug tracking
 
For the Scala projects developed on Linux as an operating system, working with SBT condenses the list of the above components, making the process of development more accessible, as it unites different steps in one tool (compiling, building, testing and debugging). Another advantage of using SBT is the opportunity of working interactively in REPL to develop bits of code which can be then inserted in the editor of choice, working from within the Linux command line.             

Life cycle of a software development project (Rehman, Paul 2003, p.2):
- requirement gathering
- writing functional specifications
- creating architecture and design documents
- implementation and coding
- testing and quality assurance
- software release
- documentation
- support and new features

Software development "is not just writing code". Each project starts with a requirement analysis which investigates the real-world need of the final product. Which functions should the new software carry in real-world problem solving within the specified domain? Functional specifications present the functionality of a software product on an abstract level "defining its input/outpt behavior". Further, on the basis of the functional specifications, an architecture of the product is created. The architecture "defines the different components of the product and how they interact with each other", without providing the explicit details on how they should be implemented to reach the desired functionality. This happens at the design stage, when you create design documents which define each individual component to the level of functions and procedures. Using the design documents and development tools (SBT, editor) the code is then implemented and tested. Testing involves: unit testing (testing one part or one component of the product using test cases to test functionality of this part of the software), sanity testing to check if all components compile, regression or stress testing to check the long-term behavior of the product when used continuously over a period of time, and functional testing using test cases built on functional specifications. If a bug (an anomaly) is found it must be reported and fixed. The documentation includes: technical documentation developed during the development process, technical documentation prepared for technical support staff, and end-user manuals and guides. The last stage of the life cycle of a software development project is the support and release of new versions depending on requirements.       


A) USING VIM AS AN EDITOR FOR THE SCALA CODE

As an editor which can be used from within the command line, VIM can also be adapted to support editing Scala code, after installing the vim-scala package of Derek Wyatt found at https://github.com/derekwyatt/vim-scala. You install vim under Linux using the package tools (dpkg, apt-get, aptitude, rpm, yum, etc.). Afterwards you open the command line and launch vim by typing vim <ENTER>. 
 
- vim starts in command mode
- change to insert mode with the "i" key
- to exit insert mode and return to command mode, press the Esc key
- save your changes with ":"
- to write the file to the hard drive we use ":w"
- move the cursor with "l" (right arrow), "h" (left arrow), "j" down one line, "k" up one line, "0" (to the beginning of the current line", "^" (first non-white space of the line), "$" (the end of the current line, "Ctrl-f" (page down), "Ctrl-b" (page up), "numberG" (to line number, ex: 1G), "G" the last line of the file, "gg" moves to the first line.

- appending text: move the cursor to the end of the line and type "a". This will append text at the end of that line. Or use "A" to move to the end of the line and start appending.
- you can use "o" to insert a line below the current line; and "O" to inser a line above the current line
    
- undo changes by using "u"
- redo changes by using "C^r" 


- deleting text: "x" will delete the current character; "3x" will delete the current and the next two characters
- "dd" deletes the current line, "6dd" deletes the current line and the next 5 lines 
- "dG" to the end of the file
- "d20G" to the 20th line of the file
- "d$" to the end of the current line
- "d0" to the beginning of the line



- cutting, copying, and pasting text: the d commad also cuts text (copies it into a paste buffer) that we can later recall with the p command to paste the contents of the buffer after the cursor or the P command to paste the contents before the cursor
- the "y" command ("yank" - copy) to copy text: "yy" the current line, "6yy" the current line and the next 4 lines, "y$" to the end of the current line, "y0" to the beginning of the line, "yG" from the end of the line to the end of the file, "y20G" from the current line to the 20th line of the file

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Lesson 1 SUMMARY


  1. The cursor is moved using either the arrow keys or the hjkl keys.
         h (left)       j (down)       k (up)       l (right)

  2. To start Vim from the shell prompt type:  vim FILENAME <ENTER>

  3. To exit Vim type:     <ESC>   :q!   <ENTER>  to trash all changes.
             OR type:      <ESC>   :wq   <ENTER>  to save the changes.

  4. To delete the character at the cursor type:  x

  5. To insert or append text type:
         i   type inserted text   <ESC>         insert before the cursor
         A   type appended text   <ESC>         append after the line

NOTE: Pressing <ESC> will place you in Normal mode or will cancel
      an unwanted and partially completed command.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        Lesson 2 SUMMARY


  1. To delete from the cursor up to the next word type:    dw
  2. To delete from the cursor to the end of a line type:    d$
  3. To delete a whole line type:    dd

  4. To repeat a motion prepend it with a number:   2w
  5. The format for a change command is:
               operator   [number]   motion
     where:
       operator - is what to do, such as  d  for delete
       [number] - is an optional count to repeat the motion
       motion   - moves over the text to operate on, such as  w (word),
                  $ (to the end of line), etc.

  6. To move to the start of the line use a zero:  0

  7. To undo previous actions, type:           u  (lowercase u)
     To undo all the changes on a line, type:  U  (capital U)
     To undo the undo's, type:                 CTRL-R

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Lesson 3 SUMMARY


  1. To put back text that has just been deleted, type   p .  This puts the
     deleted text AFTER the cursor (if a line was deleted it will go on the
     line below the cursor).

  2. To replace the character under the cursor, type   r   and then the
     character you want to have there.

  3. The change operator allows you to change from the cursor to where the
     motion takes you.  eg. Type  ce  to change from the cursor to the end of
     the word,  c$  to change to the end of a line.

  4. The format for change is:

         c   [number]   motion
ce - change to the end of the word; c$ change to the end of the line; rx -to replace a character with x for example.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- joining lines with "J" 

- search and replace: move the cursor to locations based on searches. vim can also perform replacements.
- searching within a line: "f" searches a line and moves the cursor to the next instance of a specified character. Ex: "fa" will move the cursor to the next occurence of "a". The search may be repeated by typing a semicolon. You can also use the substitute command for a line: ":s/thee/the <ENTER>" to substitute the FIRST OCCURRENCE of the searched word. 
The ":#,#s/old/new/g" command replaces old with new within a range of lines.
- search the entire file: use "/" followed by the searched word and the Enter key and repeat the search using the previous search with the "n" command. 
- global search and replace: substitution over a range of lines or the entire file: ":%s/line/LINE/g" (g stands for global, i.e. the subst. is performed on every instance of the search string); to change the file back to its previous form type ":%s/line/LINE/gc"  

Editing multiple files:
- vim file1 file2 file3...
- switch betw. files: ":n" and ":N" to switch back
- ":buffers" displays a list of files being edited
- you can perform switching with ":buffer 2" to switch to file 2
  
Opening additional files:
- to add an additional file use the ":e your_file_name" command
- then check the files open with ":buffers"
- you can only switch with "buffer no."

Copying content from one file into another:
- copy with yank, swich with buffer and paste with p
  
Inserting an entire file into another (retrieving and merging files):
- while you are in the current file use the command ":r other_file_to_be_inserted_in_the_current"
 
Printing:
- ":ha" and the file is sent to the default printer
- ":[range]ha[rdcopy][!] [arguments]" 
- ":[range]ha[rdcopy][!] > {filename} to print to another file

Matching parantheses:
- find the corresponding paranthesis or bracket with "%" (move the cursor on the first paranthesis or bracket then type %). This command is useful in debugging a program with unmatched parantheses!

Executing an external command:
- type ":!" to place you in command-line mode, then type and execute any external shell command
- for ex. ":! ls <ENTER>" to execute the ls command. 

Selecting text to write:
- type v to place you in visual mode, and move the cursor to the end line of your selection. The selected text will be highlighted. 
- then press the ":" and at the bottom of the screen ":'<,>'" will appear, this indicatesyou've selected smth.. Then, complete the command with "w TEST <ENTER>", to write the selection to the file named TEST. 

You can use the selection in visual mode with other operators too (d deletes the text, y yanks the text). 




